[
  {
    "id": "f07d965a.b6b228",
    "type": "tab",
    "label": "Octoprint MMU Notifications",
    "disabled": false,
    "info": ""
  },
  {
    "id": "98908838.27e068",
    "type": "http in",
    "z": "f07d965a.b6b228",
    "name": "Octoprint Endpoint",
    "url": "/octoprint_mmu",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 120,
    "wires": [["e3a6ba1a.173bc8", "2ef2159.f041aea", "dc3eb5c0.0430e8"]]
  },
  {
    "id": "b1f9680e.504158",
    "type": "e-mail",
    "z": "f07d965a.b6b228",
    "d": true,
    "server": "mail.yourisp.com.au",
    "port": "465",
    "secure": true,
    "tls": true,
    "name": "your.email@example.com",
    "dname": "",
    "x": 800,
    "y": 400,
    "wires": []
  },
  {
    "id": "5ea2d4f0.379dbc",
    "type": "http response",
    "z": "f07d965a.b6b228",
    "name": "",
    "statusCode": "",
    "headers": {},
    "x": 130,
    "y": 260,
    "wires": []
  },
  {
    "id": "e3a6ba1a.173bc8",
    "type": "template",
    "z": "f07d965a.b6b228",
    "name": "",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "plain",
    "template": "{ \"result\": \"OK\" }",
    "output": "json",
    "x": 140,
    "y": 180,
    "wires": [["5ea2d4f0.379dbc"]]
  },
  {
    "id": "2f09a524.ec212a",
    "type": "pushover api",
    "z": "f07d965a.b6b228",
    "keys": "edb607a6.f818a8",
    "title": "",
    "name": "",
    "x": 760,
    "y": 320,
    "wires": []
  },
  {
    "id": "891b189.75001e8",
    "type": "function",
    "z": "f07d965a.b6b228",
    "name": "Format for Distribution",
    "func": "/* \nEmail: \n  Sends the msg.payload as an email, \n  with a subject of msg.topic.\n\nPushover\nmsg.payload: The message of the notification, supports a few html tags\n\nOptional Inputs\nmsg.topic: This will be used as the title of the notifcation if Title is not set\nmsg.priority: -2/-1/1/2. Default: 0 (normal)\n\nIf the priority is 2 (emergency), you should provide msg.retry and msg.expire.\n\nmsg.device: Default for all device if not provided. Seprated by a comma\nmsg.sound: Name of the notification sound, see the list\nmsg.timestamp: An unix timestamp to specific the date time of your notification\n\nThese are the parts of msg.__stats that the formatter cares about\n{\n    thisPrint: {\n        display: {\n            status: \"IDLE\",\n        }\n    }\n    mmu: {\n        unrecoverableCount: 0,\n        display: {\n            status: \"\"\n        }\n    }\n};\n*/\nconst defaultPreviousState = {\n  previousPrintStatus: \"\",\n  previousMMULoadResult: \"\",\n  previousMMUUnrecoverableCount: 0,\n};\n\nvar previousState = context.get(\"previousState\") || defaultPreviousState;\n\nconst stats = msg.__stats;\nvar mustSendMessage = false;\nvar topic = \"\";\nvar payload = \"\";\n\nif (stats.thisPrint.display.status !== previousState.previousPrintStatus) {\n  const newStatus = stats.thisPrint.display.status;\n  mustSendMessage = true;\n  topic = `Octoprint Print Status Changed: ${newStatus}`;\n  payload = `Hello,\n\nOctoprint Print Status Changed: ${newStatus}\n\nHappy Printing!\n`;\n  previousState.previousPrintStatus = newStatus;\n} else if (stats.mmu.display.status !== previousState.previousMMULoadResult) {\n  const newStatus = stats.mmu.display.status;\n  mustSendMessage = true;\n  topic = `Octoprint MMU Status Changed: ${newStatus}`;\n  payload = `Hello,\n\nOctoprint MMU Status Changed: ${newStatus}\n\nGood luck!\n`;\n  previousState.previousMMULoadResult = newStatus;\n} else if (stats.mmu.unrecoverableCount !== previousState.previousMMUUnrecoverableCount) {\n  const newCount = stats.mmu.unrecoverableCount;\n  mustSendMessage = true;\n  topic = `ALERT: Octoprint MMU Unrecoverable Load Failure`;\n  payload = `Hello,\n\nThe MMU has suffered an unrecoverable load failure and requires human intervention.\n\nUnrecoverable count is now ${newCount}.\n\nKeep calm and print on!\n`;\n  previousState.previousMMUUnrecoverableCount = newCount;\n}\n\ncontext.set(\"previousState\", previousState);\n\nif (mustSendMessage) {\n  return {\n    payload: payload,\n    topic: topic,\n    timestamp: Date.now(),\n  };\n}\n\nreturn null;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 440,
    "y": 140,
    "wires": [["2f09a524.ec212a", "b1f9680e.504158"]]
  },
  {
    "id": "5fa2303d.19a5c",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 7,
    "width": 0,
    "height": 0,
    "name": "successfulLoadDisplay",
    "label": "Successful Load Total",
    "format": "{{msg.__stats.mmu.seccessfulCount}}",
    "layout": "col-center",
    "x": 1060,
    "y": 320,
    "wires": []
  },
  {
    "id": "2ef2159.f041aea",
    "type": "function",
    "z": "f07d965a.b6b228",
    "name": "Update Stats",
    "func": "const defaultPrint = {\n    failedCount: 0,\n    failedSeconds: 0,\n    printStartedTimestamp: 0,\n    seccessfulCount: 0,\n    successfulSeconds: 0,\n    totalSeconds: 0,\n    unrecoverableCount: 0,\n    display: {\n        failed: \"0:00:00\",\n        successful: \"0:00:00\",\n        status: \"IDLE\",\n        total: \"0:00:00\",\n    },\n};\n\nconst defaultPrints = {\n    successful: 0,\n    failed: 0,\n};\n\nconst defaultStats = {\n    isPrinting: false,\n    previousMMUSuccess: true,\n    previousCalc: 0,\n    thisPrint: defaultPrint,\n    printer: {\n        failedSeconds: 0,\n        successfulSeconds: 0,\n        totalSeconds: 0,\n        display: {\n            failed: \"0:00:00\",\n            successful: \"0:00:00\",\n            total: \"0:00:00\",\n        },\n        prints: defaultPrints,\n    },\n    mmu: {\n        failedCount: 0,\n        failedStreak: 0,\n        longestSuccessStreak: 0,\n        seccessfulCount: 0,\n        successStreak: 0,\n        unrecoverableCount: 0,\n        averageSuccessStreak: {\n            count: 0,\n            value: 0,\n        },\n        display: {\n            status: \"\"\n        }\n    }\n};\n\nvar stats = context.get('stats')||defaultStats;\n\nconst { eventName } = msg.payload;\nconst timestamp = msg.payload.timestamp || Date.now();\n\nfunction pluralise(str, v) {\n    if (v !== 1) {\n        return `${str}s`\n    } else {\n        return str\n    }\n}\n\nfunction as_time_display(seconds_val) {\n    var hours   = Math.floor(seconds_val / 3600);\n    var minutes = Math.floor((seconds_val - (hours * 3600)) / 60);\n    var seconds = seconds_val - (hours * 3600) - (minutes * 60);\n    \n    if (seconds_val > 86400) {\n        const days = Math.floor(seconds_val / 86400);\n        hours = hours % 24;\n        \n        return \"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\" +days + pluralise(\" day\", days) + \", \"\n            + hours + pluralise(\" hour\", hours) + \",<br/>\"\n            + minutes + pluralise(\" minute\", minutes) + \" and \"\n            + seconds + pluralise(\" second\", seconds);\n    } else {\n        if (hours   < 10) {hours   = \"0\"+hours;}\n        if (minutes < 10) {minutes = \"0\"+minutes;}\n        if (seconds < 10) {seconds = \"0\"+seconds;}\n        return hours + ':' + minutes + ':' + seconds;        \n    }\n}\n\n\nswitch (eventName) {\n    case \"PrintStarted\":\n        stats.isPrinting = true;\n        stats.previousMMUSuccess = true;\n        stats.thisPrint = defaultPrint;\n        stats.thisPrint.printStartedTimestamp = timestamp;\n        stats.previousCalc = timestamp;\n        stats.thisPrint.display.status = \"PRINTING\"\n        break;\n    case \"PrintDone\":\n        stats.isPrinting = false;\n        stats.thisPrint.display.status = \"COMPLETE\"\n        stats.printer.prints.successful ++;\n        break;\n    case \"PrintFailed\":\n        stats.isPrinting = false;\n        stats.thisPrint.display.status = \"FAILED\"\n        stats.printer.prints.failed ++;\n        break;\n    case \"PrintCancelled\":\n        stats.isPrinting = false;\n        stats.thisPrint.display.status = \"CANCELLED\"\n        break;\n    case \"PLUGIN_MMU_LOAD_EVENTS_PAUSED\":\n        stats.thisPrint.display.status = \"STALLED (INTERVENTION REQ.)\"\n        break;\n    case \"resetStats\":\n        stats = defaultStats;\n        break;\n}\n\nvar { isPrinting, previousMMUSuccess } = stats;\n\nif (isPrinting === true) {\n    const timeSecondsDiff = Math.round((timestamp - stats.previousCalc) / 1000);\n    switch (eventName) {\n        case \"TICK\":\n            stats.printer.totalSeconds += timeSecondsDiff;\n            stats.thisPrint.totalSeconds += timeSecondsDiff;\n            stats.thisPrint.display.total = as_time_display(stats.thisPrint.totalSeconds);\n            stats.printer.display.total = as_time_display(stats.printer.totalSeconds);\n            \n            if (previousMMUSuccess === true) {\n                stats.thisPrint.successfulSeconds += timeSecondsDiff;\n                stats.printer.successfulSeconds += timeSecondsDiff;\n                stats.thisPrint.display.successful = as_time_display(stats.thisPrint.successfulSeconds);\n                stats.printer.display.successful = as_time_display(stats.printer.successfulSeconds);\n            } else {\n                stats.thisPrint.failedSeconds += timeSecondsDiff;\n                stats.printer.failedSeconds += timeSecondsDiff;\n                stats.thisPrint.display.failed = as_time_display(stats.thisPrint.failedSeconds);\n                stats.printer.display.failed = as_time_display(stats.printer.failedSeconds);\n            }\n            break;\n        case \"PLUGIN_MMU_LOAD_EVENTS_SUCCESS\":\n            stats.thisPrint.seccessfulCount++;\n            stats.mmu.seccessfulCount++;\n            stats.mmu.display.status = \"SUCCESS\";\n            stats.thisPrint.display.status = \"PRINTING\"\n        \n            if (previousMMUSuccess === true) {\n                stats.mmu.successStreak ++;\n            } else {\n                stats.mmu.successStreak = 1;\n                stats.mmu.failedStreak = 0;\n            }\n        \n            if (stats.mmu.successStreak > stats.mmu.longestSuccessStreak) {\n                stats.mmu.longestSuccessStreak = stats.mmu.successStreak;\n            }\n            stats.previousMMUSuccess = true;\n            break;\n        case \"PLUGIN_MMU_LOAD_EVENTS_FAILED\":\n            stats.thisPrint.failedCount++;\n            stats.mmu.failedCount++;\n            stats.mmu.display.status = \"FAIL\";\n            stats.thisPrint.display.status = \"STALLED (MMU FAIL)\"\n\n            if (previousMMUSuccess === true) {\n                stats.mmu.failedStreak = 1;\n                stats.thisPrint.failedStreak = 1;\n                // update success streak count\n                const count = stats.mmu.averageSuccessStreak.count + 1;\n                const value = stats.mmu.averageSuccessStreak.value + stats.mmu.successStreak;\n                stats.mmu.averageSuccessStreak.count = count;\n                stats.mmu.averageSuccessStreak.value = (value / count);\n            } else {\n                stats.mmu.failedStreak++;\n                stats.thisPrint.failedStreak++;\n            }\n\n            if (stats.mmu.failedStreak == 3) {\n                stats.mmu.unrecoverableCount++;\n                stats.thisPrint.unrecoverableCount++;\n            }\n            stats.previousMMUSuccess = false;\n            break;\n    }\n}\n\nstats.previousCalc = timestamp;\ncontext.set('stats', stats);\nmsg.__stats = stats;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 450,
    "y": 60,
    "wires": [
      [
        "5fa2303d.19a5c",
        "739ecdcc.76f344",
        "241fe5c8.ef7c0a",
        "88430723.426308",
        "586d7191.8b9488",
        "442fd269.08eb54",
        "7ea35dab.a4dc04",
        "f4609be0.4a93e8",
        "81518cc.fd910f",
        "1ebf5650.75bdea",
        "9088bed3.830c1",
        "495c623e.b07e7c",
        "5f118d1f.51d944",
        "9f066958.cf71c8",
        "1e5e9a85.2658d5",
        "bd07ab63.73f43",
        "cc1686b.a99ed78",
        "891b189.75001e8",
        "a907e4db.6ddc68",
        "fb24fa1.0be6e08",
        "a923295a.2c25c8"
      ]
    ]
  },
  {
    "id": "739ecdcc.76f344",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 8,
    "width": 0,
    "height": 0,
    "name": "failedlLoadDisplay",
    "label": "Failed Load Total",
    "format": "{{msg.__stats.mmu.failedCount}}",
    "layout": "col-center",
    "x": 1050,
    "y": 360,
    "wires": []
  },
  {
    "id": "241fe5c8.ef7c0a",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 1,
    "width": 0,
    "height": 0,
    "name": "lastLoadDisplay",
    "label": "Previous Load Result",
    "format": "{{msg.__stats.mmu.display.status}}",
    "layout": "col-center",
    "x": 1040,
    "y": 40,
    "wires": []
  },
  {
    "id": "88430723.426308",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 2,
    "width": 0,
    "height": 0,
    "name": "successfulStreakLoadDisplay",
    "label": "Successful Load Streak",
    "format": "{{msg.__stats.mmu.successStreak}}",
    "layout": "col-center",
    "x": 1080,
    "y": 100,
    "wires": []
  },
  {
    "id": "586d7191.8b9488",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 3,
    "width": 0,
    "height": 0,
    "name": "failedlStreakLoadDisplay",
    "label": "Failed Load Streak",
    "format": "{{msg.__stats.mmu.failedStreak}}",
    "layout": "col-center",
    "x": 1070,
    "y": 140,
    "wires": []
  },
  {
    "id": "442fd269.08eb54",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 4,
    "width": 0,
    "height": 0,
    "name": "longestSuccessfulStreakDisplay",
    "label": "Longest Success Streak",
    "format": "{{msg.__stats.mmu.longestSuccessStreak}}",
    "layout": "col-center",
    "x": 1090,
    "y": 200,
    "wires": []
  },
  {
    "id": "7ea35dab.a4dc04",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 6,
    "width": 0,
    "height": 0,
    "name": "unrecoverableFailureCount",
    "label": "Unrecoverable Failure Count",
    "format": "{{msg.__stats.mmu.unrecoverableCount}}",
    "layout": "col-center",
    "x": 1080,
    "y": 280,
    "wires": []
  },
  {
    "id": "81518cc.fd910f",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 2,
    "width": 0,
    "height": 0,
    "name": "TotalPrintingTimeDisplay",
    "label": "Total Printing Time",
    "format": "{{msg.__stats.thisPrint.display.total}}",
    "layout": "col-center",
    "x": 1410,
    "y": 80,
    "wires": []
  },
  {
    "id": "1ebf5650.75bdea",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 3,
    "width": 0,
    "height": 0,
    "name": "SuccessfulPrintingTimeDisplay",
    "label": "Successful Printing Time",
    "format": "{{msg.__stats.thisPrint.display.successful}}",
    "layout": "col-center",
    "x": 1430,
    "y": 120,
    "wires": []
  },
  {
    "id": "9088bed3.830c1",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 4,
    "width": 0,
    "height": 0,
    "name": "FailedPrintingTimeDisplay",
    "label": "Failed Printing Time",
    "format": "{{msg.__stats.thisPrint.display.failed}}",
    "layout": "col-center",
    "x": 1410,
    "y": 160,
    "wires": []
  },
  {
    "id": "3a7837de.9f8de",
    "type": "inject",
    "z": "f07d965a.b6b228",
    "name": "Clock",
    "props": [
      {
        "p": "payload.timestamp",
        "v": "",
        "vt": "date"
      },
      {
        "p": "payload.eventName",
        "v": "TICK",
        "vt": "str"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 130,
    "y": 60,
    "wires": [["2ef2159.f041aea"]]
  },
  {
    "id": "495c623e.b07e7c",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 5,
    "width": 0,
    "height": 0,
    "name": "ThisPrintSuccessfulLoads",
    "label": "Successful Loads",
    "format": "{{msg.__stats.thisPrint.seccessfulCount}}",
    "layout": "col-center",
    "x": 1410,
    "y": 200,
    "wires": []
  },
  {
    "id": "5f118d1f.51d944",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 6,
    "width": 0,
    "height": 0,
    "name": "ThisPrintLoadFailures",
    "label": "Load Failures",
    "format": "{{msg.__stats.thisPrint.failedCount}}",
    "layout": "col-center",
    "x": 1400,
    "y": 240,
    "wires": []
  },
  {
    "id": "f4609be0.4a93e8",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 1,
    "width": 0,
    "height": 0,
    "name": "ThisPrintStatus",
    "label": "Status",
    "format": "{{msg.__stats.thisPrint.display.status}}",
    "layout": "col-center",
    "x": 1380,
    "y": 40,
    "wires": []
  },
  {
    "id": "a907e4db.6ddc68",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "a52abfb7.cb326",
    "order": 5,
    "width": 0,
    "height": 0,
    "name": "mmuAverageSuccessfulStreak",
    "label": "Average Successful Streak",
    "format": "{{msg.__stats.mmu.averageSuccessStreak.value.toFixed(1)}}",
    "layout": "col-center",
    "x": 1090,
    "y": 240,
    "wires": []
  },
  {
    "id": "9f066958.cf71c8",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "52785d90.fa206c",
    "order": 6,
    "width": 0,
    "height": 0,
    "name": "ThisPrintUnrecoverableLoadFailures",
    "label": "Unrecoverable Load Failures",
    "format": "{{msg.__stats.thisPrint.unrecoverableCount}}",
    "layout": "col-center",
    "x": 1450,
    "y": 280,
    "wires": []
  },
  {
    "id": "1e5e9a85.2658d5",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "fc9773b0.3949f",
    "order": 1,
    "width": 0,
    "height": 0,
    "name": "PrinterTotalPrintingTimeDisplay",
    "label": "Total Printing Time",
    "format": "{{msg.__stats.printer.display.total}}",
    "layout": "col-center",
    "x": 1750,
    "y": 40,
    "wires": []
  },
  {
    "id": "bd07ab63.73f43",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "fc9773b0.3949f",
    "order": 2,
    "width": 0,
    "height": 0,
    "name": "PrinterSuccessfulPrintingTimeDisplay",
    "label": "Successful Printing Time",
    "format": "{{msg.__stats.printer.display.successful}}",
    "layout": "col-center",
    "x": 1770,
    "y": 80,
    "wires": []
  },
  {
    "id": "cc1686b.a99ed78",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "fc9773b0.3949f",
    "order": 3,
    "width": 0,
    "height": 0,
    "name": "PrinterUnsuccessfulPrintingTimeDisplay",
    "label": "Unsuccessful Printing Time",
    "format": "{{msg.__stats.printer.display.failed}}",
    "layout": "col-center",
    "x": 1780,
    "y": 120,
    "wires": []
  },
  {
    "id": "30102749.07cba8",
    "type": "inject",
    "z": "f07d965a.b6b228",
    "name": "RESET STATS",
    "props": [
      {
        "p": "payload.eventName",
        "v": "resetStats",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 160,
    "y": 380,
    "wires": [["2ef2159.f041aea"]]
  },
  {
    "id": "fb24fa1.0be6e08",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "fc9773b0.3949f",
    "order": 4,
    "width": 0,
    "height": 0,
    "name": "PrinterSuccessfulPrints",
    "label": "Successful Prints",
    "format": "{{msg.__stats.printer.prints.successful}}",
    "layout": "col-center",
    "x": 1730,
    "y": 160,
    "wires": []
  },
  {
    "id": "a923295a.2c25c8",
    "type": "ui_text",
    "z": "f07d965a.b6b228",
    "group": "fc9773b0.3949f",
    "order": 5,
    "width": 0,
    "height": 0,
    "name": "PrinterFailedPrints",
    "label": "Failed Prints",
    "format": "{{msg.__stats.printer.prints.failed}}",
    "layout": "col-center",
    "x": 1710,
    "y": 200,
    "wires": []
  },
  {
    "id": "dc3eb5c0.0430e8",
    "type": "debug",
    "z": "f07d965a.b6b228",
    "d": true,
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 360,
    "wires": []
  },
  {
    "id": "edb607a6.f818a8",
    "type": "pushover-keys",
    "name": ""
  },
  {
    "id": "a52abfb7.cb326",
    "type": "ui_group",
    "name": "MMU",
    "tab": "752beb34.f1e7e4",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "52785d90.fa206c",
    "type": "ui_group",
    "name": "This Print",
    "tab": "752beb34.f1e7e4",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "fc9773b0.3949f",
    "type": "ui_group",
    "name": "Printer",
    "tab": "752beb34.f1e7e4",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "752beb34.f1e7e4",
    "type": "ui_tab",
    "name": "3d Printer",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  }
]
